import streamlit as st
import tensorflow as tf
import numpy as np
import pandas as pd
from click import style

from utils import preprocess_image
from PIL import Image
import altair as alt
import io

# Load model
model = tf.keras.models.load_model('cnn_cifar10_model.h5')

# Class names CIFAR-10
class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']

st.title("Nh·∫≠n di·ªán h√¨nh ·∫£nh b·∫±ng AI")
st.write("Vui l√≤ng k√©o th·∫£ ho·∫∑c ch·ªçn nhi·ªÅu ·∫£nh ƒë·ªÉ nh·∫≠n di·ªán.")

st.markdown("""
    <style>
    .stButton > button {
        background-color: #4CAF50; /* N√∫t th∆∞·ªùng */
        color: white;
        font-weight: bold;
        border: none;
        padding: 10px 24px;
        border-radius: 8px;
    }
    .stDownloadButton > button {
        background-color: #2196F3; /* N√∫t download */
        color: white;
        font-weight: bold;
        border: none;
        padding: 10px 24px;
        border-radius: 8px;
    }
     .stDownloadButton > button:hover {
        background-color: #0b7dff; /* M√†u n·ªÅn khi hover (ƒë·∫≠m h∆°n) */
        color: white;
    }
    </style>
    """, unsafe_allow_html=True)

# Top-N Slider
top_n = st.slider('Ch·ªçn c√°c label d·ª± ƒëo√°n', min_value=1, max_value=10, value=3)

uploaded_files = st.file_uploader("Ch·ªçn ·∫£nh...", type=["jpg", "jpeg", "png"], accept_multiple_files=True)

# Bi·∫øn ƒë·ªÉ t·ªïng h·ª£p summary
good_predictions = 0
bad_predictions = 0

# Danh s√°ch l∆∞u to√†n b·ªô k·∫øt qu·∫£ ƒë·ªÉ gom CSV t·ªïng
all_predictions = []

if uploaded_files:
    with st.spinner('ƒêang ƒëo√°n...'):
        for uploaded_file in uploaded_files:
            img = Image.open(uploaded_file)
            st.image(img, caption=f'Uploaded: {uploaded_file.name}', use_container_width=True)

            img_array = preprocess_image(uploaded_file)

            raw_preds = model.predict(img_array)[0]
            predictions = tf.nn.softmax(raw_preds).numpy()

            # l·∫•y top-N theo slider
            top_n_indices = predictions.argsort()[-top_n:][::-1]
            top_n_labels = [(class_names[i], predictions[i]) for i in top_n_indices]

            # T·∫°o b·∫£ng k·∫øt qu·∫£ cho ·∫£nh hi·ªán t·∫°i
            df_result = pd.DataFrame({
                "Image Name": [uploaded_file.name]*top_n,
                "Label": [label for label, _ in top_n_labels],
                "ƒê·ªô t·ª± tin (%)": [score * 100 for _, score in top_n_labels]
            })

            # L∆∞u k·∫øt qu·∫£ v√†o danh s√°ch t·ªïng
            all_predictions.append(df_result)

            # Ki·ªÉm tra confidence cao nh·∫•t
            if top_n_labels[0][1] * 100 < 60:
                st.warning(f"‚ö†Ô∏è ƒê·ªô t·ª± tin th·∫•p cho ·∫£nh {uploaded_file.name}: Kh√≥ d·ª± ƒëo√°n! Cao nh·∫•t = {top_n_labels[0][1] * 100:.2f}%")
                bad_predictions += 1
            else:
                good_predictions += 1

            st.subheader(f"üéØ Top {top_n} k·∫øt qu·∫£ d·ª± ƒëo√°n cho ·∫£nh {uploaded_file.name}:")
            st.table(df_result)

            # V·∫Ω bar chart
            df_chart = pd.DataFrame({
                'Label': [label for label, _ in top_n_labels],
                'ƒê·ªô t·ª± tin': [score * 100 for _, score in top_n_labels]
            })

            chart = alt.Chart(df_chart).mark_bar().encode(
                x=alt.X('Label', sort='-y'),
                y='ƒê·ªô t·ª± tin',
                color=alt.Color('Label', legend=None),
                tooltip=['Label', 'ƒê·ªô t·ª± tin']
            ).properties(width=400, height=300)

            st.altair_chart(chart, use_container_width=True)

    # K·∫øt th√∫c Predict t·∫•t c·∫£ ·∫£nh
    st.success("‚úÖ Ho√†n th√†nh!")
    st.markdown("------------------------------")
    st.header("TH·ªêNG K√ä S·ªê LI·ªÜU")

    # üì¶ Gom t·∫•t c·∫£ th√†nh 1 b·∫£ng l·ªõn
    df_all_predictions = pd.concat(all_predictions, ignore_index=True)

    # üéØ Filter ƒê·ªô t·ª± tin
    st.subheader("L·ªçc k·∫øt qu·∫£ d·ª± ƒëo√°n theo m·ª©c ƒë·ªô t·ª± tin to√†n b·ªô ·∫£nh")
    confidence_threshold = st.slider('Select minimum confidence (%) to display', 0, 100, 0)

    df_filtered = df_all_predictions[df_all_predictions['ƒê·ªô t·ª± tin (%)'] >= confidence_threshold]

    # Preview k·∫øt qu·∫£ sau filter
    st.write(f"Hi·ªÉn th·ªã c√°c d·ª± ƒëo√°n c√≥ ƒë·ªô t·ª± tin >= {confidence_threshold}%:")
    st.dataframe(df_filtered)

    # Download CSV sau khi l·ªçc
    csv_total_filtered = df_filtered.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="T·∫£i xu·ªëng (CSV)",
        data=csv_total_filtered,
        file_name="filtered_predictions_summary.csv",
        mime='text/csv',
    )

    # T·ªïng k·∫øt summary dashboard
    st.subheader("B·∫£ng t·ªïng k·∫øt k·∫øt qu·∫£ d·ª± ƒëo√°n to√†n b·ªô ·∫£nh")

    df_summary = pd.DataFrame({
        'Lo·∫°i d·ª± ƒëo√°n': ['D·ª± ƒëo√°n t·ªët (>=60%)', 'ƒê·ªô t·ª± tin th·∫•p (<60%)'],
        'S·ªë l∆∞·ª£ng ·∫£nh': [good_predictions, bad_predictions]
    })

    st.table(df_summary)

    chart_summary = alt.Chart(df_summary).mark_bar().encode(
        x='Lo·∫°i d·ª± ƒëo√°n',
        y='S·ªë l∆∞·ª£ng ·∫£nh',
        color='Lo·∫°i d·ª± ƒëo√°n',
        tooltip=['Lo·∫°i d·ª± ƒëo√°n', 'S·ªë l∆∞·ª£ng ·∫£nh']
    ).properties(width=500, height=600)

    st.altair_chart(chart_summary, use_container_width=True)

    # Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi to√†n b·ªô ƒë·ªô t·ª± tin
    st.subheader("Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi c√°c m·ª©c ƒë·ªô t·ª± tin to√†n b·ªô ·∫£nh")
    st.info("G·ª£i √Ω: N·∫øu m√¥ h√¨nh t·ªët, bi·ªÉu ƒë·ªì s·∫Ω l·ªách ph·∫£i (nhi·ªÅu d·ª± ƒëo√°n tr√™n 80%-100%)")

    # Histogram ph√¢n ph·ªëi
    hist_chart = alt.Chart(df_all_predictions).mark_bar().encode(
        alt.X("ƒê·ªô t·ª± tin (%)", bin=alt.Bin(maxbins=30), title='ƒê·ªô t·ª± tin (%)'),
        y='count()',
        tooltip=['count()']
    ).properties(
        width=600,
        height=400
    )

    st.altair_chart(hist_chart, use_container_width=True)